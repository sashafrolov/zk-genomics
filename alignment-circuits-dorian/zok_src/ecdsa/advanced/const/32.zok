from "../../../zok_utils/big_nat" import BigNat, ModuloConst, ModuloHelperConst
from "../../struct/ecdsastruct" import ECPoint, ECPoint_v2, BasePowers
from "../../struct/ecdsaconststruct" import PointDoubleConst, PointAddConst, ScalarMultConst, VerifyECDSAConst, VerifyECDSAConstInner

from "../../../zok_utils/struct/adv_struct" import ModuloConstAdv
from "../../struct/ecdsaconst_advstruct" import PointDoubleConstAdv, PointAddConstAdv, ScalarMultConstAdv//, VerifyECDSASigmaConst_inner
from "../../const/ecdsaconst_32" import P, P_SQU, ZG, NG, AC, Q_MODULUS, P_MODULUS, P_MODULUS_SQU, P256_a, P256_MAXWORD1, P256_MAXWORD2, P256_MAXWORD3, P256_MAXWORD4, P256_MAXWORD5, P256_AUXCONST1, P256_AUXCONST2, P256_AUXCONST3, P256_AUXCONST4, P256_AUXCONST5


const u32[4] QUOTIENT_BW = [2, 4, 1, 3]

const ModuloConstAdv<ZG, NG, AC> CONST_FOR_MODQ = ModuloConstAdv{ gp_maxword: P256_MAXWORD1, 
                                                                aux_const: P256_AUXCONST1, 
                                                                quotient_bw: 1}
// const ModuloConstAdv<ZG, NG, AC> CONST_FOR_CHECK_RESP = ModuloConstAdv{ 
//                                                             gp_maxword: [143657293556474698813933415464566672660939398288604729902407532468910, 80879839987252484178064044428714866879490334381023138718756817368765, 340282366841710300967557013899048910850],
//                                                             aux_const: [89188191075325690597107910205041859246, 4631870000223041459163343128201900361708487608860976087039, 340282366841710300967557013911933812735, 0],
//                                                             quotient_bw: 1} // It can actually be 0

const PointDoubleConstAdv<P, P_SQU, ZG, NG, AC> CONST_FOR_PD = PointDoubleConstAdv{
    P_MODULUS: P_MODULUS,
    P_MODULUS_SQU: P_MODULUS_SQU,
    P256_a: P256_a,
    MODULO_CONST: [ModuloConstAdv{gp_maxword: P256_MAXWORD3, aux_const: P256_AUXCONST3, quotient_bw: 4}, // QUOTIENT_BW[1]
                ModuloConstAdv{gp_maxword: P256_MAXWORD4, aux_const: P256_AUXCONST4, quotient_bw: 1}, // QUOTIENT_BW[2]
                ModuloConstAdv{gp_maxword: P256_MAXWORD5, aux_const: P256_AUXCONST5, quotient_bw: 3}] // QUOTIENT_BW[3]
}

const PointAddConstAdv<P, P_SQU, ZG, NG, AC> CONST_FOR_PA = PointAddConstAdv{
    P_MODULUS: P_MODULUS,
    P_MODULUS_SQU: P_MODULUS_SQU,
    P256_a: P256_a,
    MODULO_CONST: [ModuloConstAdv{gp_maxword: P256_MAXWORD2, aux_const: P256_AUXCONST2, quotient_bw: 2}, // QUOTIENT_BW[0]
                ModuloConstAdv{gp_maxword: P256_MAXWORD3, aux_const: P256_AUXCONST3, quotient_bw: 4}, // QUOTIENT_BW[1]
                ModuloConstAdv{gp_maxword: P256_MAXWORD4, aux_const: P256_AUXCONST4, quotient_bw: 1}, // QUOTIENT_BW[2]
                ModuloConstAdv{gp_maxword: P256_MAXWORD5, aux_const: P256_AUXCONST5, quotient_bw: 3}] // QUOTIENT_BW[3]
}

const ScalarMultConstAdv<P, P_SQU, ZG, NG, AC> CONST_FOR_SCAMUL = ScalarMultConstAdv{
    const_for_pa: CONST_FOR_PA,
    const_for_pd: CONST_FOR_PD
}
