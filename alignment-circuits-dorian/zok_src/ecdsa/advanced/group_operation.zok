// from "../../zok_utils/modulomultiply_v3" import modulo
from "../../zok_utils/modulomultiply" import addition, checkmultiply
// from "../../zok_utils/big_nat" import BigNat, BigNatb, BigNatb_v2, ModuloConst, ModuloHelperConst, BigNatModMultwores_v5
from "../struct/ecdsastruct" import ECPoint_plain, ECPoint_v2, BasePowers_plain //, PointDouble3, PointAdd3, ScalarMult, BasePowers, ScalarMultWindow
// import "utils/casts/u32_to_field"
from "../../zok_utils/assert_well_formed" import less_than_threshold
from "../../zok_utils/scalar_mult" import scalar_multiply_bignat
from "../../zok_utils/is_equal" import is_equal_v2
import "utils/casts/u32_from_bits"

// from "group_operation" import point_add_window

from "../../zok_utils/range_check" import BigNat_to_BigNatb, assert_well_formed, adv_rangecheck, assert_well_formed_for_special_form, adv_subrangecheck
from "../../zok_utils/big_nat" import BigNat, BigNatb, ModuloHelperConst
from "../struct/ecdsa_advstruct" import PointDouble_init, PointDouble, PointAdd_init, PointAdd, PointAdd_x_init, PointAdd_x_checked, ScalarMult_init
// from "../struct/ecdsaconststruct" import PointDoubleConst, PointAddConst, ScalarMultConst
from "../struct/ecdsaconst_advstruct" import PointDoubleConstAdv, PointAddConstAdv, ScalarMultConstAdv
from "../../zok_utils/struct/adv_struct" import BigNatModMult_init, BigNat_init_quotient, BigNat_init, BigNatModMult, BigNatModMultadv, BigNatModMult_wores_adv
from "../../zok_utils/basic/mod_arithmetic" import modulo

from "../../zok_utils/struct/adv_struct" import ModuloConstAdv, BigNatModMult_wores

def bignat_to_bool_vec<N, W, TOTAL>(BigNat<N> input) -> bool[TOTAL]:
    BigNatb<N, W> inputb = BigNat_to_BigNatb::<N, W>(input)
    return [...inputb.limbs[7], ...inputb.limbs[6], ...inputb.limbs[5], ...inputb.limbs[4], ...inputb.limbs[3], ...inputb.limbs[2], ...inputb.limbs[1], ...inputb.limbs[0]]

// P_MODULUS, P_MODULUS_SQU, P256_a
// CW = 37+36
// CW2 = 38+37
// 1. compute m 
// for different points m = (y1 - y2) * inverse_mod(x1 - x2, curve.p)
// 2. compute x3 = m * m - x1 - x2 % p
// 3. compute y3 = -y1 + m * (x1 - x3) % p
// assume pt2 is not infinity point
// corresponind to from "group_operation" import point_add_inner
// def point_add_inner<LG, NG, W, W2, P, Z, V, Qm1, CW, P_SQU, ZG, AC>(ECPoint_v2<P> pt1, ECPoint_v2<P> pt2, PointAdd3<W, W2, P, Z, V, Qm1, CW> intermediate, PointAddConst<P, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<P>:
def point_add_inner<W, P, Z, V, Q, ZG, NG, LG, AC, P_SQU>(ECPoint_v2<P> pt1, ECPoint_v2<P> pt2, PointAdd<P, Z, V, Q, ZG> intermediate, PointAddConstAdv<P, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<P>:
    // 1.1 compute m1 = (y1 - y2) * inverse_mod(x1 - x2, curve.p)  <=> m*(x1-x2)+y2 == p*quotient + y1 
    // <=> m*(x1+2*p) + y2 == p*(quotient + 2*m) + y1 + m*x2
    BigNat<P> two_p = scalar_multiply_bignat::<P, 2>(helper_const.P_MODULUS) // 2*p
    BigNat<P> x1_plus_2p = addition::<P, P>(pt1.x, two_p) // x1+2*p
    BigNat<P> m1 = intermediate.intermediate_mod[0].res
    // BigNat<P> m1 = BigNatb_to_BigNat::<P, W>(intermediate.remainders[0])
    assert(checkmultiply::<P, P, Z>(m1, x1_plus_2p, intermediate.products[0])) // m*(x1+2*p)
    BigNat<Z> res_left = addition::<Z, P>(intermediate.products[0], pt2.y) // m*(x1+2*p) + y2

    assert(checkmultiply::<P, P, Z>(m1, pt2.x, intermediate.products[1])) // m*x2
    BigNat<Z> remainder_new = addition::<Z, P>(intermediate.products[1], pt1.y) // m*x2 + y1
    // u32 AC = NG+1
    // u32 ZG = NG-1
    // In this case, the number of bits of quotient = 258
    assert(modulo::<W, P, Z, V, Q, Z, ZG, NG, LG, AC>(res_left, helper_const.P_MODULUS, remainder_new, intermediate.intermediate_mod[0].v, intermediate.intermediate_mod[0].quotient, intermediate.intermediate_mod[0].carry, helper_const.MODULO_CONST[0].gp_maxword, helper_const.MODULO_CONST[0].aux_const))
    // Z->Z, R->Z
    // assert(modulo::<LG, W, 2, Z, NG, ZG, P, Z, Qm1, V, CW, AC>(res_left, helper_const.P_MODULUS, remainder_new, intermediate.intermediate_mod[0].v, intermediate.intermediate_mod[0].quotientb, intermediate.intermediate_mod[0].carry, ModuloHelperConst{moduloconst: helper_const.MODULO_CONST[0], shift: helper_const.shift}))

    // 1.2 compute m2 = (3 * x1 * x1 + curve.a) * inverse_mod(2 * y1, curve.p), where curve.a = -3
    // <=> 2*y*m + 12*p*p = p*(quotient+12p) + 3*x*x + a // quotient bits = 260
    BigNat<P> m2 = intermediate.intermediate_mod[1].res
    // BigNat<P> m2 = BigNatb_to_BigNat::<P, W>(intermediate.remainders[1])
    BigNat<P> double_y = scalar_multiply_bignat::<P, 2>(pt1.y) // 2*y; the result might not be well-formed
    assert(checkmultiply::<P, P, Z>(m2, double_y, intermediate.products[2])) // m*(2*y)
    u32 DOUBLE_P = 2*P // DOUBLE_P should equal V
    BigNat<DOUBLE_P> twelve_p_squ = scalar_multiply_bignat::<DOUBLE_P, 12>(helper_const.P_MODULUS_SQU) // 12*p*p
    BigNat<DOUBLE_P> left1 = addition::<DOUBLE_P, Z>(twelve_p_squ, intermediate.products[2]) // 12*p*p + 2*y*m

    BigNat<P> three_x1 = scalar_multiply_bignat::<P, 3>(pt1.x)
    assert(checkmultiply::<P, P, Z>(three_x1, pt2.x, intermediate.products[3])) // check if (3*pt.x) * pt.x == squ_x
    BigNat<Z> remainder_new1 = addition::<Z, P>(intermediate.products[3], helper_const.P256_a) // the number of limbs of P256_a <= that of three_squ_x
    // In this case, the number of bits in quotient = 260 // Question: can the left-hand side has more limbs than the right-hand side
    assert(modulo::<W, P, DOUBLE_P, V, Q, Z, ZG, NG, LG, AC>(left1, helper_const.P_MODULUS, remainder_new1, intermediate.intermediate_mod[1].v, intermediate.intermediate_mod[1].quotient, intermediate.intermediate_mod[1].carry, helper_const.MODULO_CONST[1].gp_maxword, helper_const.MODULO_CONST[1].aux_const))
    // Z->DOUBLE_P, R->Z
    // assert(modulo::<LG, W, 4, DOUBLE_P, NG, ZG, P, Z, Qm1, V, CW, AC>(left1, helper_const.P_MODULUS, remainder_new1, intermediate.intermediate_mod[1].v, intermediate.intermediate_mod[1].quotientb, intermediate.intermediate_mod[1].carry, ModuloHelperConst{moduloconst: helper_const.MODULO_CONST[1], shift: helper_const.shift}))

    bool point_equal = is_equal_v2(pt1.x, pt2.x) // actually I also need to check if y1 = y2
    BigNat<P> m = if point_equal then m2 else m1 fi
    // 2. compute x3 = m * m - x1 - x2 % p
    // <=> m*m + 4*p == p*(quotient+4) + x3 + x1 + x2
    assert(checkmultiply::<P, P, Z>(m, m, intermediate.products[4])) // m*m
    BigNat<P> four_p = scalar_multiply_bignat::<P, 4>(helper_const.P_MODULUS) // 4*p
    BigNat<Z> res_left2 = addition::<Z, P>(intermediate.products[4], four_p) // m*m + 4*p

    BigNat<P> x1_plus_x2 = addition::<P, P>(pt1.x, pt2.x)
    BigNat<P> x3 = intermediate.intermediate_mod[2].res
    // BigNat<P> x3 = BigNatb_to_BigNat::<P, W>(intermediate.remainders[2])
    BigNat<P> remainder_new2 = addition::<P, P>(x1_plus_x2, x3) // x1+x2+x3
    // In this case, the number of bits of quotient = 257
    assert(modulo::<W, P, Z, V, Q, P, ZG, NG, LG, AC>(res_left2, helper_const.P_MODULUS, remainder_new2, intermediate.intermediate_mod[2].v, intermediate.intermediate_mod[2].quotient, intermediate.intermediate_mod[2].carry, helper_const.MODULO_CONST[2].gp_maxword, helper_const.MODULO_CONST[2].aux_const))
    // Z->Z, R->P
    // assert(modulo::<LG, W, 1, Z, NG, ZG, P, P, Qm1, V, CW, AC>(res_left2, helper_const.P_MODULUS, remainder_new2, intermediate.intermediate_mod[2].v, intermediate.intermediate_mod[2].quotientb, intermediate.intermediate_mod[2].carry, ModuloHelperConst{moduloconst: helper_const.MODULO_CONST[2], shift: helper_const.shift}))

    // 3. compute y3 = -y1 + m * (x1 - x3) % p
    // method 1: check -y1 + m * (x1 - x3) = p*quotient + y3 <=> 2*p + 4*p*p + m*x1 = p*quotient + y1 + m*x3 + y3
    // method 2: check y3 = p*quotient -y1 + m * (x1 - x3) <=> y3 + y1 + m*x3 + 4*p*p = p*(quotient+4*p) + m*x1 (method 2 is better)
    BigNat<P> y3 = intermediate.intermediate_mod[3].res
    // BigNat<P> y3 = BigNatb_to_BigNat::<P, W>(intermediate.remainders[3])
    BigNat<P> y1_plus_y3 = addition::<P, P>(pt1.y, y3)
    assert(checkmultiply::<P, P, Z>(m, x3, intermediate.products[5])) // m*x3
    BigNat<Z> res_left3_0 = addition::<Z, P>(intermediate.products[5], y1_plus_y3) // m*x3 + y1 + y3
    BigNat<DOUBLE_P> four_p_squ = scalar_multiply_bignat::<DOUBLE_P, 4>(helper_const.P_MODULUS_SQU) // 4*p*p
    BigNat<DOUBLE_P> res_left3_1 = addition::<DOUBLE_P, Z>(four_p_squ, res_left3_0) // 4*p*p + m*x3 + y1 + y3

    assert(checkmultiply::<P, P, Z>(m, pt1.x, intermediate.products[6])) // m*x1 (remainder)
    // In this case, the number of bits of quotient = 259 // check intermediate.products[6] % P_MODULUS = res_left3_1
    assert(modulo::<W, P, DOUBLE_P, V, Q, Z, ZG, NG, LG, AC>(res_left3_1, helper_const.P_MODULUS, intermediate.products[6], intermediate.intermediate_mod[3].v, intermediate.intermediate_mod[3].quotient, intermediate.intermediate_mod[3].carry, helper_const.MODULO_CONST[3].gp_maxword, helper_const.MODULO_CONST[3].aux_const))
    // Z->DOUBLE_P, R->Z
    // assert(modulo::<LG, W, 3, DOUBLE_P, NG, ZG, P, Z, Qm1, V, CW, AC>(res_left3_1, helper_const.P_MODULUS, intermediate.products[6], intermediate.intermediate_mod[3].v, intermediate.intermediate_mod[3].quotientb, intermediate.intermediate_mod[3].carry, ModuloHelperConst{moduloconst: helper_const.MODULO_CONST[3], shift: helper_const.shift}))
    return ECPoint_v2{x: x3, y: y3, empty: false}

def PointAdd_init_to_PointAdd<W, W2, P, Z, V, Q, Qm1, Lp1, ZG, CL, NG, AC>(PointAdd_init<P, Z, V, Qm1, Lp1, ZG, CL> input, ModuloConstAdv<ZG, NG, AC>[4] MODULO_CONST) -> PointAdd<P, Z, V, Q, ZG>:
    // u32 Q = Qm1 + 1
    assert(Q == Qm1+1)
    BigNat<Q>[4] quotients = [BigNat {limbs: [0; Q]}; 4] // note: different quotient has different bitwidth
    BigNat<ZG>[4] carries = [BigNat {limbs: [0; ZG]}; 4]
    BigNat<P>[4] results = [BigNat {limbs: [0; P]}; 4]
    for u32 i in 0..4 do
        u32 QW = MODULO_CONST[i].quotient_bw
        quotients[i] = assert_well_formed_for_special_form::<Q, Qm1, Lp1, W, W2, QW>(input.intermediate_mod[i].quotient_init)
        carries[i] = adv_rangecheck::<ZG, CL, W>(input.intermediate_mod[i].carry_init)
        results[i] = assert_well_formed::<P, Lp1, W, W2>(input.intermediate_mod[i].res_init)
    endfor

    // BigNatModMult<P, Z, V, Q, ZG>[4] intermediate_mod = [
    //     BigNatModMult{z: input.intermediate_mod[0].z, v: input.intermediate_mod[0].v, quotient: quotients[0], carry: carries[0], res: results[0]},
    //     BigNatModMult{z: input.intermediate_mod[1].z, v: input.intermediate_mod[1].v, quotient: quotients[1], carry: carries[1], res: results[1]},
    //     BigNatModMult{z: input.intermediate_mod[2].z, v: input.intermediate_mod[2].v, quotient: quotients[2], carry: carries[2], res: results[2]},
    //     BigNatModMult{z: input.intermediate_mod[3].z, v: input.intermediate_mod[3].v, quotient: quotients[3], carry: carries[3], res: results[3]}
    // ]

    BigNatModMult<P, Z, V, Q, ZG>[4] intermediate_mod = [
        BigNatModMult{v: input.intermediate_mod[0].v, quotient: quotients[0], carry: carries[0], res: results[0]},
        BigNatModMult{v: input.intermediate_mod[1].v, quotient: quotients[1], carry: carries[1], res: results[1]},
        BigNatModMult{v: input.intermediate_mod[2].v, quotient: quotients[2], carry: carries[2], res: results[2]},
        BigNatModMult{v: input.intermediate_mod[3].v, quotient: quotients[3], carry: carries[3], res: results[3]}
    ]

    PointAdd<P, Z, V, Q, ZG> output = PointAdd {
        products: input.products,
        intermediate_mod: intermediate_mod
    }
    return output
// corresponind to from "group_operation" import point_add_window; both pt1 and pt2 can be empty
// def point_add_window<LG, NG, W, W2, P, Z, V, Qm1, CW, P_SQU, ZG, AC>(ECPoint_v2<P> pt1, ECPoint_v2<P> pt2, PointAdd3<W, W2, P, Z, V, Qm1, CW> intermediate, PointAddConst<P, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<P>:
def point_add_window<W, BW, P, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, P_SQU>(ECPoint_v2<P> pt1, ECPoint_v2<P> pt2, PointAdd_init<P, Z, V, Qm1, Lp1, ZG, CL> intermediate_init, PointAddConstAdv<P, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<P>:
    // Convert PointAdd_init to PointAdd
    u32 Q = Qm1 + 1
    u32 BW2 = W % BW
    PointAdd<P, Z, V, Q, ZG> intermediate = PointAdd_init_to_PointAdd::<BW, BW2, P, Z, V, Q, Qm1, Lp1, ZG, CL, NG, AC>(intermediate_init, helper_const.MODULO_CONST)
    // return if pt1.empty then pt2 else (if pt2.empty then pt1 else point_add_inner::<LG, NG, W, W2, P, Z, V, Qm1, CW, P_SQU, ZG, AC>(pt1, pt2, intermediate, helper_const) fi) fi
    return if pt1.empty then pt2 else (if pt2.empty then pt1 else point_add_inner::<W, P, Z, V, Q, ZG, NG, LG, AC, P_SQU>(pt1, pt2, intermediate, helper_const) fi) fi

// corresponind to point_add from "group_operation"
def point_add<W, BW, P, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, P_SQU>(ECPoint_v2<P> pt1, ECPoint_v2<P> pt2, PointAdd_init<P, Z, V, Qm1, Lp1, ZG, CL> intermediate_init, PointAddConstAdv<P, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<P>:
    u32 Q = Qm1 + 1
    u32 BW2 = W % BW
    PointAdd<P, Z, V, Q, ZG> intermediate = PointAdd_init_to_PointAdd::<BW, BW2, P, Z, V, Q, Qm1, Lp1, ZG, CL, NG, AC>(intermediate_init, helper_const.MODULO_CONST)
    return if pt1.empty then pt2 else point_add_inner::<W, P, Z, V, Q, ZG, NG, LG, AC, P_SQU>(pt1, pt2, intermediate, helper_const) fi



def PointDouble_init_to_PointDouble<W, W2, P, Z, V, Q, Qm1, Lp1, ZG, CL, NG, AC>(PointDouble_init<P, Z, V, Qm1, Lp1, ZG, CL> input, ModuloConstAdv<ZG, NG, AC>[3] MODULO_CONST) -> PointDouble<P, Z, V, Q, ZG>:
    // u32 Q = Qm1 + 1
    assert(Q == Qm1+1)
    BigNat<Q>[3] quotients = [BigNat {limbs: [0; Q]}; 3] // note: different quotient has different bitwidth
    BigNat<ZG>[3] carries = [BigNat {limbs: [0; ZG]}; 3]
    BigNat<P>[3] results = [BigNat {limbs: [0; P]}; 3]
    for u32 i in 0..3 do
        u32 QW = MODULO_CONST[i].quotient_bw
        quotients[i] = assert_well_formed_for_special_form::<Q, Qm1, Lp1, W, W2, QW>(input.intermediate_mod[i].quotient_init)
        carries[i] = adv_rangecheck::<ZG, CL, W>(input.intermediate_mod[i].carry_init)
        results[i] = assert_well_formed::<P, Lp1, W, W2>(input.intermediate_mod[i].res_init)
    endfor

    // BigNatModMult<P, Z, V, Q, ZG>[3] intermediate_mod = [
    //     BigNatModMult{z: input.intermediate_mod[0].z, v: input.intermediate_mod[0].v, quotient: quotients[0], carry: carries[0], res: results[0]},
    //     BigNatModMult{z: input.intermediate_mod[1].z, v: input.intermediate_mod[1].v, quotient: quotients[1], carry: carries[1], res: results[1]},
    //     BigNatModMult{z: input.intermediate_mod[2].z, v: input.intermediate_mod[2].v, quotient: quotients[2], carry: carries[2], res: results[2]}
    // ]

    BigNatModMult<P, Z, V, Q, ZG>[3] intermediate_mod = [
        BigNatModMult{v: input.intermediate_mod[0].v, quotient: quotients[0], carry: carries[0], res: results[0]},
        BigNatModMult{v: input.intermediate_mod[1].v, quotient: quotients[1], carry: carries[1], res: results[1]},
        BigNatModMult{v: input.intermediate_mod[2].v, quotient: quotients[2], carry: carries[2], res: results[2]}
    ]

    PointDouble<P, Z, V, Q, ZG> output = PointDouble {
        products: input.products,
        intermediate_mod: intermediate_mod
    }
    return output

// not finish
// def point_double_inner<LG, NG, W, W2, P, Z, V, Qm1, CW, P_SQU, ZG, AC>(ECPoint_v2<P> pt, PointDouble3<W, W2, P, Z, V, Qm1, CW> intermediate, PointDoubleConst<P, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<P>: // assume pt1 is on the curve and is not the point at infinity
def point_double_inner<W, P, Z, V, Q, ZG, NG, LG, AC, P_SQU>(ECPoint_v2<P> pt, PointDouble<P, Z, V, Q, ZG> intermediate, PointDoubleConstAdv<P, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<P>: // assume pt1 is on the curve and is not the point at infinity
    // Goal 1: check that m = (3 * x1 * x1 + curve.a) * inverse_mod(2 * y1, curve.p), where curve.a = -3
    // 1. check 2*y*m + 12*p*p = p*(quotient+12p) + 3*x*x + a // quotient bits = 260
    BigNat<P> m = intermediate.intermediate_mod[0].res
    // BigNat<P> m = BigNatb_to_BigNat::<P, W>(intermediate.remainders[0])
    BigNat<P> double_y = scalar_multiply_bignat::<P, 2>(pt.y) // 2*y; the result might not be well-formed
    assert(checkmultiply::<P, P, Z>(m, double_y, intermediate.products[0])) // m*(2*y)
    u32 DOUBLE_P = 2*P // DOUBLE_P should equal V
    BigNat<DOUBLE_P> twelve_p_squ = scalar_multiply_bignat::<DOUBLE_P, 12>(helper_const.P_MODULUS_SQU) // 12*p*p
    BigNat<DOUBLE_P> left1 = addition::<DOUBLE_P, Z>(twelve_p_squ, intermediate.products[0]) // 12*p*p + 2*y*m

    BigNat<P> three_x = scalar_multiply_bignat::<P, 3>(pt.x) 
    assert(checkmultiply::<P, P, Z>(three_x, pt.x, intermediate.products[1]))
    BigNat<Z> remainder_new1 = addition::<Z, P>(intermediate.products[1], helper_const.P256_a) // the number of limbs of P256_a <= that of three_squ_x
    // In this case, the number of bits in quotient = 260 // Question: can the left-hand side has more limbs than the right-hand side
    assert(modulo::<W, P, DOUBLE_P, V, Q, Z, ZG, NG, LG, AC>(left1, helper_const.P_MODULUS, remainder_new1, intermediate.intermediate_mod[0].v, intermediate.intermediate_mod[0].quotient, intermediate.intermediate_mod[0].carry, helper_const.MODULO_CONST[0].gp_maxword, helper_const.MODULO_CONST[0].aux_const))
    // Z->DOUBLE_P, R->Z
    // assert(modulo::<LG, W, 4, DOUBLE_P, NG, ZG, P, Z, Qm1, V, CW, AC>(left1, helper_const.P_MODULUS, remainder_new1, intermediate.intermediate_mod[0].v, intermediate.intermediate_mod[0].quotientb, intermediate.intermediate_mod[0].carry, ModuloHelperConst{moduloconst: helper_const.MODULO_CONST[0], shift: helper_const.shift}))
    // 2. x3 = (m * m - 2 * x) mod p <=> (m * m - 2 * x) = p * quotient + x3 <=> m * m + 4 * p = p * (quotient+4) + x3 + 2x // quotient bits 257
    assert(checkmultiply::<P, P, Z>(m, m, intermediate.products[2])) // check if m * m == squ_m
    BigNat<P> quadruple_p = scalar_multiply_bignat::<P, 4>(helper_const.P_MODULUS)
    BigNat<Z> left3 = addition::<Z, P>(intermediate.products[2], quadruple_p) // Z >= P
    BigNat<P> x3 = intermediate.intermediate_mod[1].res
    // BigNat<P> x3 = BigNatb_to_BigNat::<P, W>(intermediate.remainders[1])
    BigNat<P> double_x = scalar_multiply_bignat::<P, 2>(pt.x)
    BigNat<P> x3_plus_doublex = addition::<P, P>(x3, double_x) // P >= P
    // In this case, the number of bits required in quotient is 255, one bit smaller than that in P_MODULUS
    assert(modulo::<W, P, Z, V, Q, P, ZG, NG, LG, AC>(left3, helper_const.P_MODULUS, x3_plus_doublex, intermediate.intermediate_mod[1].v, intermediate.intermediate_mod[1].quotient, intermediate.intermediate_mod[1].carry, helper_const.MODULO_CONST[1].gp_maxword, helper_const.MODULO_CONST[1].aux_const))
    // Z->Z, R->P
    // assert(modulo::<LG, W, 1, Z, NG, ZG, P, P, Qm1, V, CW, AC>(left3, helper_const.P_MODULUS, x3_plus_doublex, intermediate.intermediate_mod[1].v, intermediate.intermediate_mod[1].quotientb, intermediate.intermediate_mod[1].carry, ModuloHelperConst{moduloconst: helper_const.MODULO_CONST[1], shift: helper_const.shift}))
    // check y3 = p*quotient -y1 + m * (x1 - x3) <=> y3 + y1 + m*x3 + 4*p*p = p*(quotient+4*p) + m*x1
    // method 2: check y3 = p*quotient -y1 + m * (x1 - x3) <=> y3 + y1 + m*x3 + 4*p*p = p*(quotient+4*p) + m*x1 (method 2 is better)
    BigNat<P> y3 = intermediate.intermediate_mod[2].res
    // BigNat<P> y3 = BigNatb_to_BigNat::<P, W>(intermediate.remainders[2])
    BigNat<P> y1_plus_y3 = addition::<P, P>(y3, pt.y) // y3 + y
    assert(checkmultiply::<P, P, Z>(m, x3, intermediate.products[3])) // m*x3
    BigNat<Z> res_left3_0 = addition::<Z, P>(intermediate.products[3], y1_plus_y3) // m*x3 + y1 + y3
    BigNat<DOUBLE_P> four_p_squ = scalar_multiply_bignat::<DOUBLE_P, 4>(helper_const.P_MODULUS_SQU) // 4*p*p
    BigNat<DOUBLE_P> res_left3_1 = addition::<DOUBLE_P, Z>(four_p_squ, res_left3_0) // 4*p*p + m*x3 + y1 + y3

    assert(checkmultiply::<P, P, Z>(m, pt.x, intermediate.products[4])) // m*x1 (remainder)
    // In this case, the number of bits of quotient = 259 // check intermediate.products[6] % P_MODULUS = res_left3_1
    assert(modulo::<W, P, DOUBLE_P, V, Q, Z, ZG, NG, LG, AC>(res_left3_1, helper_const.P_MODULUS, intermediate.products[4], intermediate.intermediate_mod[2].v, intermediate.intermediate_mod[2].quotient, intermediate.intermediate_mod[2].carry, helper_const.MODULO_CONST[2].gp_maxword, helper_const.MODULO_CONST[2].aux_const))
    //Z->DOUBLE_P, R->Z
    // assert(modulo::<LG, W, 3, DOUBLE_P, NG, ZG, P, Z, Qm1, V, CW, AC>(res_left3_1, helper_const.P_MODULUS, intermediate.products[4], intermediate.intermediate_mod[2].v, intermediate.intermediate_mod[2].quotientb, intermediate.intermediate_mod[2].carry, ModuloHelperConst{moduloconst: helper_const.MODULO_CONST[2], shift: helper_const.shift}))

    return ECPoint_v2{x: x3, y: y3, empty: pt.empty}

// corresponind to point_double from "group_operation"
def point_double<W, BW, P, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, P_SQU>(ECPoint_v2<P> pt, PointDouble_init<P, Z, V, Qm1, Lp1, ZG, CL> intermediate_init, PointDoubleConstAdv<P, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<P>:
    u32 Q = Qm1 + 1
    u32 BW2 = W % BW
    PointDouble<P, Z, V, Q, ZG> intermediate = PointDouble_init_to_PointDouble::<BW, BW2, P, Z, V, Q, Qm1, Lp1, ZG, CL, NG, AC>(intermediate_init, helper_const.MODULO_CONST)
    return point_double_inner::<W, P, Z, V, Q, ZG, NG, LG, AC, P_SQU>(pt, intermediate, helper_const)


// split k into chunks of length 5 (the least significant chunk might have length < 5), iterate from the most significant bit of k
// NG: Number of groups
// WS: window size
// PA: number of point additions (51 in this case)
// append_k: the single vector of k
def scalar_mult_w_cached_window_method<W, BW, NP, NQ, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, WS, Nm1, S, LS, P_SQU, PA>(bool is_k_equal_q, BigNat<NQ> k, ECPoint_v2<NP> pt, BasePowers_plain<NP, Nm1, S, LS> base_powers, PointAdd_init<NP, Z, V, Qm1, Lp1, ZG, CL>[PA] intermediate, PointAddConstAdv<NP, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<NP>: // assume pt is on curves
    // step 1: Split append_k into chunks of length 5 (the least significant chunk might have length < 5)
    u32 TOTAL = NQ * W
    bool[TOTAL] append_k = bignat_to_bool_vec::<NQ, W, TOTAL>(k)

    assert(W == 32)

    u32 N_CHUNKS = PA + 1
    u32 start = 0 // bit-0 is the most significant bit
    u32[N_CHUNKS] k_chunks = [0; N_CHUNKS] // note: 52 = ceil(W*NP/WS)

    for u32 i in 0..PA do
        k_chunks[i] = u32_from_bits([...[false; 32-WS], ...append_k[start..start+WS]])
        start = start + WS
    endfor

    // u32 W = BW*(Lp1-1) + BW2
    u32 remain_WS = if (W*NP) % WS == 0 then WS else (W*NP) % WS fi

    k_chunks[PA] = u32_from_bits([...[false; 32-remain_WS], ...append_k[start..start+remain_WS]])

    // step 2: apply window method
    ECPoint_plain<NP> point_plain = base_powers.base_powers[0][k_chunks[0]]
    ECPoint_v2<NP> result = ECPoint_v2 {x: BigNat{ limbs: point_plain.x}, y: BigNat{ limbs: point_plain.y}, empty: k_chunks[0] == 0}

    u32 idx_pd = 0
    for u32 i in 1..PA do // 3, 4 ok
        point_plain = base_powers.base_powers[i][k_chunks[i]]
        ECPoint_v2<NP> intermediate_point = ECPoint_v2 {x: BigNat{ limbs: point_plain.x}, y: BigNat{ limbs: point_plain.y}, empty: (k_chunks[i] == 0)}
        // result = point_add_window::<LG, NG, W, W2, NP, Z, V, Qm1, CW, P_SQU, ZG, AC>(result, intermediate_point, intermediate[i-1], helper_const) // 0, ..., 49
        result = point_add_window::<W, BW, NP, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, P_SQU>(result, intermediate_point, intermediate[i-1], helper_const) // 0, ..., 49
    endfor

    point_plain = base_powers.last_base_powers[k_chunks[PA]]
    ECPoint_v2<NP> intermediate_point = ECPoint_v2 {x: BigNat{ limbs: point_plain.x}, y: BigNat{ limbs: point_plain.y}, empty: (k_chunks[PA] == 0)}

    // result = point_add_window::<LG, NG, W, W2, NP, Z, V, Qm1, CW, P_SQU, ZG, AC>(result, intermediate_point, intermediate[PA-1], helper_const)
    result = point_add_window::<W, BW, NP, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, P_SQU>(result, intermediate_point, intermediate[PA-1], helper_const)
    result.empty = is_k_equal_q
    return result

// iterate from the least significant bit of k
// corresponding to scalar_mult from zok_src/ecdsa/group_operation.zok
def scalar_mult<W, BW, NQ, NP, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, P_SQU>(BigNatb<NQ, W> k, ECPoint_v2<NP> pt, ScalarMult_init<W, NQ, NP, Z, V, Qm1, Lp1, ZG, CL> intermediate, ScalarMultConstAdv<NP, P_SQU, ZG, NG, AC> helper_const) -> ECPoint_v2<NP>: // assume pt is on curves
    ECPoint_v2<NP> addend = pt
    ECPoint_v2<NP> result = ECPoint_v2 {x: pt.x, y: pt.y, empty: true}
    // bool initial = true
    assert(W == 32)

    for u32 j in 0..NQ do
        for u32 i in 0..W do
            // In our use case, k cannot be zero. It is because a and b cannot be zero since sha256(m) and 
            // result = if k.limbs[j][W-i-1] then point_add::<LG, NG, W, W2, NP, Z, V, Qm1, CW, P_SQU, ZG, AC>(result, addend, intermediate.mm_for_pa[j][i], helper_const.const_for_pa) else result fi
            // new generics: BW, BW2, Lp1, CL
            result = if k.limbs[j][W-i-1] then point_add::<W, BW, NP, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, P_SQU>(result, addend, intermediate.mm_for_pa[j][i], helper_const.const_for_pa) else result fi
            // addend = point_double::<LG, NG, W, W2, NP, Z, V, Qm1, CW, P_SQU, ZG, AC>(addend, intermediate.mm_for_pd[j][i], helper_const.const_for_pd)
            addend = point_double::<W, BW, NP, Z, V, Qm1, Lp1, ZG, CL, NG, LG, AC, P_SQU>(addend, intermediate.mm_for_pd[j][i], helper_const.const_for_pd)
        endfor
    endfor
    return result


// Q: number of limbs in quotient
// NQ: Number of limbs of the modulus q
// check if x-coordinate of pt1+pt2 equals r in Fq
// In this function, assume number of limbs of modulus p equals number of limbs of modulus q
def check_for_u_hat_inner<W, NQ, NP, Z, V, Q, ZG, NG, LG, AC, P_SQU>(ECPoint_v2<NP> pt1, ECPoint_v2<NP> pt2, PointAdd_x_checked<NP, Z, V, Q, ZG> intermediate, BigNat<NP> r, BigNat<NQ> q_modulus, PointAddConstAdv<NP, P_SQU, ZG, NG, AC> helper_const) -> bool:
    // 1.1 compute m1 = (y1 - y2) * inverse_mod(x1 - x2, curve.p)  <=> m*(x1-x2)+y2 == p*quotient + y1 
    // <=> m*(x1+2*p) + y2 == p*(quotient + 2*m) + y1 + m*x2
    BigNat<NP> two_p = scalar_multiply_bignat::<NP, 2>(helper_const.P_MODULUS) // 2*p
    BigNat<NP> x1_plus_2p = addition::<NP, NP>(pt1.x, two_p) // x1+2*p

    BigNat<NP> m1 = intermediate.intermediate_mod[0].res
    assert(checkmultiply::<NP, NP, Z>(m1, x1_plus_2p, intermediate.products[0])) // m*(x1+2*p)
    BigNat<Z> res_left = addition::<Z, NP>(intermediate.products[0], pt2.y) // m*(x1+2*p) + y2

    assert(checkmultiply::<NP, NP, Z>(m1, pt2.x, intermediate.products[1])) // m*x2
    BigNat<Z> remainder_new = addition::<Z, NP>(intermediate.products[1], pt1.y) // m*x2 + y1
    // In this case, the number of bits of quotient = 258
    assert(modulo::<W, NP, Z, V, Q, Z, ZG, NG, LG, AC>(res_left, helper_const.P_MODULUS, remainder_new, intermediate.intermediate_mod[0].v, intermediate.intermediate_mod[0].quotient, intermediate.intermediate_mod[0].carry, helper_const.MODULO_CONST[0].gp_maxword, helper_const.MODULO_CONST[0].aux_const))
    // Z->Z, R->Z

    // 1.2 compute m2 = (3 * x1 * x1 + curve.a) * inverse_mod(2 * y1, curve.p), where curve.a = -3
    // <=> 2*y*m + 12*p*p = p*(quotient+12p) + 3*x*x + a // quotient bits = 260
    BigNat<NP> m2 = intermediate.intermediate_mod[1].res
    BigNat<NP> double_y = scalar_multiply_bignat::<NP, 2>(pt1.y) // 2*y; the result might not be well-formed
    assert(checkmultiply::<NP, NP, Z>(m2, double_y, intermediate.products[2])) // m*(2*y)
    u32 DOUBLE_P = 2*NP // DOUBLE_P should equal V
    BigNat<DOUBLE_P> twelve_p_squ = scalar_multiply_bignat::<DOUBLE_P, 12>(helper_const.P_MODULUS_SQU) // 12*p*p
    BigNat<DOUBLE_P> left1 = addition::<DOUBLE_P, Z>(twelve_p_squ, intermediate.products[2]) // 12*p*p + 2*y*m

    BigNat<NP> three_x1 = scalar_multiply_bignat::<NP, 3>(pt1.x)
    assert(checkmultiply::<NP, NP, Z>(three_x1, pt2.x, intermediate.products[3])) // check if (3*pt.x) * pt.x == squ_x
    BigNat<Z> remainder_new1 = addition::<Z, NP>(intermediate.products[3], helper_const.P256_a) // the number of limbs of P256_a <= that of three_squ_x
    // In this case, the number of bits in quotient = 260 // Question: can the left-hand side has more limbs than the right-hand side
    assert(modulo::<W, NP, DOUBLE_P, V, Q, Z, ZG, NG, LG, AC>(left1, helper_const.P_MODULUS, remainder_new1, intermediate.intermediate_mod[1].v, intermediate.intermediate_mod[1].quotient, intermediate.intermediate_mod[1].carry, helper_const.MODULO_CONST[1].gp_maxword, helper_const.MODULO_CONST[1].aux_const))
    // Z->DOUBLE_P, R->Z

    bool point_equal = is_equal_v2(pt1.x, pt2.x) // actually I also need to check if y1 = y2
    BigNat<NP> m = if point_equal then m2 else m1 fi
    // 2. check that x3 = m * m - x1 - x2 % p and r = x3 % q
    // <=> m*m + 4*p == p*(quotient+4) + q*(quotient') + r + x1 + x2 where quotient' = 0 or 1
    assert(checkmultiply::<NP, NP, Z>(m, m, intermediate.products[4])) // m*m
    BigNat<NP> four_p = scalar_multiply_bignat::<NP, 4>(helper_const.P_MODULUS) // 4*p
    BigNat<Z> res_left2 = addition::<Z, NP>(intermediate.products[4], four_p) // m*m + 4*p

    BigNat<NP> x1_plus_x2 = addition::<NP, NP>(pt1.x, pt2.x)
    BigNat<NP> x3 = if intermediate.quotient_r then addition::<NP, NP>(r, q_modulus) else r fi

    BigNat<NP> remainder_new2 = addition::<NP, NP>(x1_plus_x2, x3) // x1+x2+x3
    // In this case, the number of bits of quotient = 257

    // Z->Z, R->P
    return modulo::<W, NP, Z, V, Q, NP, ZG, NG, LG, AC>(res_left2, helper_const.P_MODULUS, remainder_new2, intermediate.last_intermediate.v, intermediate.last_intermediate.quotient, intermediate.last_intermediate.carry, helper_const.MODULO_CONST[2].gp_maxword, helper_const.MODULO_CONST[2].aux_const)

def PointAdd_x_init_to_PointAdd_x_checked<W, W2, NQ, NP, NP2, Z, V, Q, Qm1, Lp1, ZG, CL, CRL, NG, AC>(PointAdd_x_init<NP, Z, V, Qm1, Lp1, ZG, CL, CRL> input, BigNat<NQ> r, field P_MINUSQ_MINUS1, ModuloConstAdv<ZG, NG, AC>[3] MODULO_CONST) -> PointAdd_x_checked<NP, Z, V, Q, ZG>:
    field carry_r = adv_subrangecheck::<CRL, W>(input.carry_r)
    // u32 BW_for_carry_r = NP2*W-1
    // assert(BW_for_carry_r == 127)
    // assert(bit_splitting::<BW_for_carry_r>(intermediate.mm_for_u_hat.carry_r))
        // *** to do
    bool quotient_r = less_than_threshold::<NP, NP2, W>(r, carry_r, P_MINUSQ_MINUS1)

    assert(Q == Qm1+1)
    BigNat<Q>[3] quotients = [BigNat {limbs: [0; Q]}; 3] // note: different quotient has different bitwidth
    BigNat<ZG>[3] carries = [BigNat {limbs: [0; ZG]}; 3]
    BigNat<NP>[2] results = [BigNat {limbs: [0; NP]}; 2]
    for u32 i in 0..2 do
        u32 QW = MODULO_CONST[i].quotient_bw
        quotients[i] = assert_well_formed_for_special_form::<Q, Qm1, Lp1, W, W2, QW>(input.intermediate_mod[i].quotient_init)
        carries[i] = adv_rangecheck::<ZG, CL, W>(input.intermediate_mod[i].carry_init)
        results[i] = assert_well_formed::<NP, Lp1, W, W2>(input.intermediate_mod[i].res_init)
    endfor

    u32 QW = MODULO_CONST[2].quotient_bw
    quotients[2] = assert_well_formed_for_special_form::<Q, Qm1, Lp1, W, W2, QW>(input.last_intermediate.quotient_init)
    carries[2] = adv_rangecheck::<ZG, CL, W>(input.last_intermediate.carry_init)

    // BigNatModMult<NP, Z, V, Q, ZG>[2] intermediate_mod = [
    //     BigNatModMult{z: input.intermediate_mod[0].z, v: input.intermediate_mod[0].v, quotient: quotients[0], carry: carries[0], res: results[0]},
    //     BigNatModMult{z: input.intermediate_mod[1].z, v: input.intermediate_mod[1].v, quotient: quotients[1], carry: carries[1], res: results[1]}
    // ]

    BigNatModMult<NP, Z, V, Q, ZG>[2] intermediate_mod = [
        BigNatModMult{v: input.intermediate_mod[0].v, quotient: quotients[0], carry: carries[0], res: results[0]},
        BigNatModMult{v: input.intermediate_mod[1].v, quotient: quotients[1], carry: carries[1], res: results[1]}
    ]

    BigNatModMult_wores<Z, V, Q, ZG> last_intermediate = BigNatModMult_wores {
        // z: input.last_intermediate.z,
        v: input.last_intermediate.v,
        quotient: quotients[2],
        carry: carries[2]
    }

    PointAdd_x_checked<NP, Z, V, Q, ZG> output = PointAdd_x_checked {
        products: input.products,
        intermediate_mod: intermediate_mod,
        last_intermediate: last_intermediate,
        quotient_r: quotient_r
    }
    
    return output
    
// corresponing to point_double from "check_for_u_hat"
def check_for_u_hat<W, BW, NQ, NP, NP2, Z, V, Qm1, Lp1, ZG, CL, CRL, NG, LG, AC, P_SQU>(ECPoint_v2<NP> pt1, ECPoint_v2<NP> pt2, PointAdd_x_init<NP, Z, V, Qm1, Lp1, ZG, CL, CRL> intermediate, BigNat<NQ> r, BigNat<NQ> q_modulus, PointAddConstAdv<NP, P_SQU, ZG, NG, AC> helper_const, field P_MINUSQ_MINUS1) -> bool:
    u32 Q = Qm1 + 1
    u32 BW2 = W % BW
    assert(W == 32)
    PointAdd_x_checked<NP, Z, V, Q, ZG> intermediate_checked = PointAdd_x_init_to_PointAdd_x_checked::<BW, BW2, NQ, NP, NP2, Z, V, Q, Qm1, Lp1, ZG, CL, CRL, NG, AC>(intermediate, r, P_MINUSQ_MINUS1, helper_const.MODULO_CONST[0..3]) // 0, 1, 2
    return check_for_u_hat_inner::<W, NQ, NP, Z, V, Q, ZG, NG, LG, AC, P_SQU>(pt1, pt2, intermediate_checked, r, q_modulus, helper_const)
