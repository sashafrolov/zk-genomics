from "../zok_utils/big_nat" import BigNat, BigNatb, BigNatModMult, BigNatb_v2, BigNatModMult_v2, BigNatModMult_v4, BigNatModMult_v5, BigNatModMult_v6


const u32 P_ = 64

const u32 NG_ = 22
const u32 AC_ = NG_ + 1
const u32 CW_ = NG_-1

// const field[2] GP_MAXWORD2048 = [16, 45193751856687139678729440049531715551]
// const field
const field[NG_] GP_MAXWORD2048 = [161759679965241228355682005939103047502576868038629302219837454417920, 323519359930482456711364011878206095005153736077258604439649139032070, 485279039895723685067046017817309142507730604115887906659460823646220, 647038719860964913422728023756412190010307472154517208879272508260370, 808798399826206141778410029695515237512884340193146511099084192874520, 970558079791447370134092035634618285015461208231775813318895877488670, 1132317759756688598489774041573721332518038076270405115538707562102820, 1294077439721929826845456047512824380020614944309034417758519246716970, 1455837119687171055201138053451927427523191812347663719978330931331120, 1617596799652412283556820059391030475025768680386293022198142615945270, 1671516692980436461410767408800893664582914364351808437108428263915580, 1509757013015195233055085402862130899447258434776642509496013987774525, 1347997333049954004699403396923027851944681566738013207276202303160375, 1186237653084712776343721390983924804442104698699383905056390618546225, 1024477973119471547988039385044821756939527830660754602836578933932075, 862718293154230319632357379105718709436950962622125300616767249317925, 700958613188989091276675373166615661934374094583495998396955564703775, 539198933223747862920993367227512614431797226544866696177143880089625, 377439253258506634565311361288409566929220358506237393957332195475475, 215679573293265406209629355349306519426643490467608091737520510861325, 53919893328024177853947349410203471924066622428978789517708826247175, 18446744065119617025]
const field[AC_] POSTGP_AUXCONST2048 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6277101735386680763495507056286727952638980837032266301440, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 6277101735386680763835789423207666416102355444464034512895, 18446744073709551615, 0]
const u8[CW_] CW_LIST2048 = [36, 37, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 38, 38, 38, 37, 36, 34]

const BigNat<P_> D_2048 = BigNat {limbs: [0, 0, 0, 0, 0, 0, 0, 0, 83887136, 50594305, 2252865893, 218499424, 3158320, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 4294967295, 131071]}
const field PARTIAL_DI = 0
// const BigNat<P_> D_2048 = BigNat {limbs: [0, 0, 0, 2658455991569831745798613544783159489, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 2658455991569831745807614120560689151, 158456325028528675187087900671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
// const BigNat<P_> D_4096 = BigNat {limbs}
struct RSAPublicKey<P>{
    BigNat<P> modulus // should be public
    //u32 expon //normally 65537
}

struct RSACertificate<W, P, N, Ntmp> {
    BigNatb<P, W> signatureb
    RSAPublicKey<P> issuerkey
    u32[N][16] padded_message
}

struct RSACertificate_wo_hash<W, P> {
    BigNatb<P, W> signatureb
    RSAPublicKey<P> issuerkey
    u32[8] digest_result
}

struct RSACertificate_v2<W, W2, P, Pm1, N> { // Pm1 = P - 1
    BigNatb_v2<Pm1, W, W2> signatureb
    RSAPublicKey<P> issuerkey
    u32[N][16] padded_message
}

struct BigNatRSA<W, A, Z, ZG, Q, V, CW> {
    BigNatModMult<W, A, Z, ZG, CW, Q, V>[16] mm // 17 = E-1
    BigNat<Z> z // for the last modular multiplication
    BigNat<V> v // for the last modular multiplication
    BigNatb<Q, W> quotientb // for the last modular multiplication
    bool[ZG][CW] carry // for the last modular multiplication
}

struct BigNatRSA_v2<W, W2, Am1, Z, ZG, CW, Qm1, V> { // be careful of the order of generics
    BigNatModMult_v2<W, W2, Am1, Z, ZG, CW, Qm1, V>[16] mm // 17 = E-1
    BigNat<Z> z // for the last modular multiplication
    BigNat<V> v // for the last modular multiplication
    BigNatb_v2<Qm1, W, W2> quotientb // for the last modular multiplication
    bool[ZG][CW] carry // for the last modular multiplication // might need fix
}

struct BigNatRSA_v4<W, A, Z, CW, Q, V> { // be careful of the generics
    BigNatModMult_v4<W, A, Z, CW, Q, V>[16] mm // 17 = E-1
    BigNat<Z> z // for the last modular multiplication
    BigNat<V> v // for the last modular multiplication
    BigNatb<Q, W> quotientb // for the last modular multiplication
    bool[CW] carry // for the last modular multiplication
}

struct BigNatRSA_v5<W, W2, A, Z, CW, Qm1, V> { // be careful of the generics
    BigNatModMult_v5<W, W2, A, Z, CW, Qm1, V>[16] mm // 17 = E-1
    BigNat<Z> z // for the last modular multiplication
    BigNat<V> v // for the last modular multiplication
    BigNatb_v2<Qm1, W, W2> quotientb // for the last modular multiplication
    bool[CW] carry // for the last modular multiplication
}

struct BigNatRSA_v6<W, W2, A, Z, ZG, Qm1, V> { // be careful of the generics
    BigNatModMult_v6<W, W2, A, Z, ZG, Qm1, V>[16] mm // 17 = E-1
    BigNat<Z> z // for the last modular multiplication
    BigNat<V> v // for the last modular multiplication
    BigNatb_v2<Qm1, W, W2> quotientb // for the last modular multiplication
    // bool[CW] carry // for the last modular multiplication
    field[ZG] carry
}

struct BigNatRSAVerify<W, P, N, Ntmp, Z, ZG, Q, V, CW, E> {
    RSACertificate<W, P, N, Ntmp> cert
    BigNatRSA<W, P, Z, ZG, Q, V, CW> intermediate
    u8 lessthan_differ
    u8 length
    bool modul_type
}