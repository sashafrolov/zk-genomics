from "../../zok_utils/assert_well_formed" import fits_in_bits, fits_in_bits_sparse, sparse_ones
from "utils" import Dual, unsafe_split, split_limbs_in_sparse, unsafe_split_dyn, unsafe_split_dyn_sparse, split_even_dual, split_odd_dual, dense_limb_to_dual_limb, dual_limbs_to_sparse_limbs, dual_limbs_to_dense_limbs, combine_limbs, split_even_dense_for_all_limbs, split_even_sparse_for_all_limbs, u32_sum
// Compute right and left parts of input s.t. 
// i. input[N-1]||0||..||input[1]||0||input[0] = left||0||right
// ii. left is sparse form of bitwidth RED_L = LIMBWIDTH[SPLIT_IDX]-RED_R bits
// iii. right = input[SPLIT_IDX] - left * (2 ** (2 * RED_R))
def split_for_shift<N, R>(field[N] input, u32[N] LIMBWIDTH) -> field[2]:
    u32 CUR_WIDTH = 0
    u32 SPLIT_IDX = 0 // input[split_idx] needs to be split
    u32 RED_R = R // limbwidth of the right part of the splited limb
    for u32 i in 0..N do
        SPLIT_IDX = if CUR_WIDTH < R then i else SPLIT_IDX fi // When i=0, CUR_WIDTH=0; When i=1, CUR_WIDTH=LIMBWIDTH[0]; When i=2, CUR_WIDTH=LIMBWIDTH[0]+LIMBWIDTH[1]; ...
        RED_R = if CUR_WIDTH < R then R-CUR_WIDTH else RED_R fi
        CUR_WIDTH = CUR_WIDTH + LIMBWIDTH[i] 
    endfor
    u32 TOTAL_WIDTH = CUR_WIDTH
    u32 LOW_BITS = RED_R * 2
    u32 HIGH_BITS = 2*LIMBWIDTH[SPLIT_IDX] - 1 - LOW_BITS
    unsafe witness field[2] split = unsafe_split::<LOW_BITS, HIGH_BITS>(input[SPLIT_IDX]) // would input[SPLIT_IDX] incur lookup cost?
    field[2] safe_split = [0, split[1]]
    safe_split[0] =  input[SPLIT_IDX] - split[1] * (2 ** LOW_BITS)
    // Check that the split limbs are well-formed
    u32 RED_L = LIMBWIDTH[SPLIT_IDX] - RED_R
    assert(fits_in_bits_sparse::<RED_L>(safe_split[1]))
    // split[0] = input[SPLIT_IDX] - split[1] * (2 ** LOW_BITS)
    // assert(input[SPLIT_IDX] == split[1] * (2 ** LOW_BITS) + split[0])
    assert(fits_in_bits_sparse::<RED_R>(safe_split[0]))

    CUR_WIDTH = 0
    field right = 0
    for u32 i in 0..SPLIT_IDX do
        right = right + input[i] * (2 ** (2 * CUR_WIDTH))
        CUR_WIDTH = CUR_WIDTH + LIMBWIDTH[i]
    endfor
    right = right + safe_split[0] * (2 ** (2 * CUR_WIDTH))
    
    // CUR_WIDTH = RED_R
    CUR_WIDTH = RED_L
    field left = safe_split[1]
    for u32 i in (SPLIT_IDX+1)..N do
        left = left + input[i] * (2 ** (2 * CUR_WIDTH))
        CUR_WIDTH = CUR_WIDTH + LIMBWIDTH[i]
    endfor
    return [right, left] // right = low_bits, left = high_bits

// constant-offset rotation (sparse->sparse) (when LIMBWIDTH[0] != R and LIMBWIDTH[0] + LIMBWIDTH[1] != R)
def rotr<N, R>(field[N] input, u32[N] LIMBWIDTH_ORI, u32[N] LIMBWIDTH_NEW) -> field:
    field[2] overall_split = split_for_shift::<N, R>(input, LIMBWIDTH_ORI)
    u32 TOTAL_WIDTH = u32_sum(LIMBWIDTH_ORI)

    field output_val = overall_split[0] * (2 ** (2 * (TOTAL_WIDTH - R))) + overall_split[1]
    // return split_limbs_in_sparse::<N>(output_val, LIMBWIDTH_NEW)
    return output_val

def rotl<N, L>(field[N] input, u32[N] LIMBWIDTH_ORI, u32[N] LIMBWIDTH_NEW) -> field:
    u32 R = u32_sum(LIMBWIDTH_ORI) - L
    return rotr::<N, R>(input, LIMBWIDTH_ORI, LIMBWIDTH_NEW)
    
// constant-offset shift (sparse->sparse) (when LIMBWIDTH[0] != R and LIMBWIDTH[0] + LIMBWIDTH[1] != R)
def shr<N, R>(field[N] input,u32[N] LIMBWIDTH_ORI, u32[N] LIMBWIDTH_NEW) -> field:
    field[2] overall_split = split_for_shift::<N, R>(input, LIMBWIDTH_ORI)
    field output_val = overall_split[1]
    // return split_limbs_in_sparse::<N>(output_val, LIMBWIDTH_NEW)
    return output_val


def xor_inner<N>(field[N] input) -> field:
    assert(N == 2 || N == 3)
    field sum = 0
    for u32 i in 0..N do
        sum = sum + input[i]
    endfor
    return sum

// N-ary XOR for W-bit values (sparse to dense) where N = 2 or 3
def xor<N,W>(field[N] input) -> field:
    return split_even_dual::<W>(xor_inner(input)).d

// N-ary XOR for value in limb representation (sparse to dense) where N = 2 or 3
def xor_for_all_limbs<N, M>(field[N] input, u32[M] LIMBWIDTH) -> field[M]:
    return split_even_dense_for_all_limbs(xor_inner(input), LIMBWIDTH)

// N-ary XOR for value in limb representation (sparse to sparse) where N = 2 or 3
def xor_for_all_limbs_sparse<N,M>(field[N] input, u32[M] LIMBWIDTH) -> field[M]:
    return split_even_sparse_for_all_limbs(xor_inner(input), LIMBWIDTH)


// 2-ary AND for W-bit values (sparse to Dual)
def and<W>(field[2] input) -> Dual:
    return split_odd_dual::<W>(input[0] + input[1])

// 2-ary AND for value in limb representation (sparse to dual)
def and_limbs_dual<N>(field[N] x, field[N] y, u32[N] LIMBWIDTH) -> Dual[N]:
    Dual[N] output = [Dual {d: 0, s: 0} ; N]
    for u32 i in 0..N do
        u32 LW = LIMBWIDTH[i]
        output[i] = and::<LW>([x[i], y[i]])
    endfor
    return output

// // 2-ary AND for value in limb representation (sparse to sparse)
// // LIMBWIDTH = [11, 11, 10]
// def and_s2s(field[3] x, field[3] y) -> field[3]:
//     // field[3] output = [0; 3]
//     // output[0] = and_11([x[0], y[0]])
//     // output[1] = and_11([x[1], y[1]])
//     // output[2] = and_10([x[2], y[2]])
//     // return output
//     Dual[3] output = and(x, y)
//     return dual_limbs_to_sparse_limbs(output)

// 2-ary AND for value in limb representation (sparse to dense)
def and_limbs_s2d<N>(field[N] x, field[N] y, u32[N] LIMBWIDTH) -> field[N]:
    return dual_limbs_to_dense_limbs(and_limbs_dual(x, y, LIMBWIDTH))

def and_limbs_s2s<N>(field[N] x, field[N] y, u32[N] LIMBWIDTH) -> field[N]:
    return dual_limbs_to_sparse_limbs(and_limbs_dual(x, y, LIMBWIDTH))

// 1-ary not for a single limb
def not<W>(field input) -> field:
    return sparse_ones::<W>() - input

// 1-ary NOT for value in limb representation (sparse to sparse)
def not_limbs<N>(field[N] input, u32[N] LIMBWIDTH) -> field[N]:
    field[N] output = [0; N]
    for u32 i in 0..N do
        u32 LW = LIMBWIDTH[i]
        output[i] = not::<LW>(input[i])
    endfor
    return output

// N-ary ADD modulo 2^32 (Convert N dense-single values to M limbs in dual form)
// C = \ceil{log2 N}
// Note: Should also work for modulo 2^K
def sum<N, M, C, CM>(field[N] input, u32[M] LIMBWIDTH) -> Dual[M]:
    assert((1 << C) >= N)
    field sum = 0
    for u32 i in 0..N do
        sum = sum + input[i]
    endfor
    u32 MP1 = M + 1
    u32[MP1] SPLITWIDTH = [...LIMBWIDTH, C]
    unsafe witness field[MP1] split = unsafe_split_dyn::<MP1>(sum, SPLITWIDTH)
    field[MP1] safe_split = [0, ...split[1..MP1]]
    safe_split[0] = sum - combine_limbs::<M>(safe_split[1..MP1], SPLITWIDTH[1..MP1]) * (2 ** (LIMBWIDTH[0]))
    assert(fits_in_bits::<CM>(safe_split[M]))
    field res_sum = combine_limbs::<M>(safe_split[0..MP1], LIMBWIDTH)
    // assert(sum == split[M] * (2 ** TOTAL_WIDTH) + res_sum)
    return dense_limb_to_dual_limb::<M>(safe_split[0..M], LIMBWIDTH)
