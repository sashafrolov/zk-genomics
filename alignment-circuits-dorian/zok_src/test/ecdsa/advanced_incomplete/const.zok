const u32 NLIMBS = 8
const u32 LIMBWIDTH = 32
const u32 W_ = LIMBWIDTH
const u32 W2_ = 1
const u32 W_PD_ = 4 // maximum number of bits in the last limb of quotient in point double
const u32 LG_ = 6 // Number of limbs per group // calculate from zk_preprocessor.rs
const u32 NG_ = 3 // number of groups // need test to verify if it is true or not // calculate from zk_preprocessor.rs
const u32 A_ = NLIMBS
const u32 NP_ = NLIMBS
const u32 NP2_ = NLIMBS/2 // Number of limbes of P - Q
const u32 NQ_ = NLIMBS
const u32 Qm1_ = NLIMBS
const u32 Pm1_ = NLIMBS-1 // number of limbs of carry for modulo operations
const u32 V_ = NLIMBS * 2 // modify again
const u32 Z_ = NLIMBS * 2 - 1 // modify
const u32 ZG_ = NG_ - 1
const u32 CW_ = 71 // calculate from zk_preprocessor.rs
const u32 AC_ = NG_ + 1

const u32 CW2_ = 75 // used in scalar multiplication
// const u32 CW3_ = 73
const u32 N_ = 20

const u32 P_SQU_ = 2*NP_

const u32 WS_ = 6 // window size


const u32 Nm1_ = ((NP_*W_+WS_-1) / WS_) - 1// ceil(256 / stride)-1
const u32 S_ = 1<<WS_
const u32 LS_ = 1<<((NP_*W_)%WS_)
const u32 PA_ = Nm1_
const u32 PD_ = 256-WS_

const u32 NP2 = 4 // number of limbs of p-q
const u32 BITWIDTH = 10 // bitwidth for the sub-table
const u32 CRL = 13 // range check for carry_r
const u32 CL = 4 // range check for carry
const u32 Lp1 = 4 // range check for normal big number 4*10 > 32